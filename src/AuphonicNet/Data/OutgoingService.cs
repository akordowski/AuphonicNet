using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace AuphonicNet.Data
{
    /// <summary>
    /// Represents a outgoing service.
    /// </summary>
    public class OutgoingService
    {
        #region Public Properties
        /// <summary>
        /// Gets the base URL of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string BaseUrl { get; internal set; }

        /// <summary>
        /// Gets the category of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Category { get; internal set; }

        /// <summary>
        /// Gets the name of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string DisplayName { get; internal set; }

        /// <summary>
        /// Gets a value that indicates whether the output file is downloadable.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public bool Downloadable { get; internal set; }

        /// <summary>
        /// Gets the email of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Email { get; internal set; }

        /// <summary>
        /// Gets the error message, if the file transfer was not successful.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string ErrorMessage { get; internal set; }

        /// <summary>
        /// Gets the host of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Host { get; internal set; }

        /// <summary>
        /// Gets a value that indicates whether this is an incomming external service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public bool Incomming { get; internal set; }

        /// <summary>
        /// Gets a value that indicates whether this is an outgoing external service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public bool Outgoing { get; internal set; }

        /// <summary>
        /// Gets the path of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Path { get; internal set; }

        /// <summary>
        /// Gets the port of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public int Port { get; internal set; }

        /// <summary>
        /// Gets the privacy info of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Privacy { get; internal set; }

        /// <summary>
        /// Gets a web page generated by an external service (e.g. YouTube, SoundCloud, archive.org).
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string ResultPage { get; internal set; }

        /// <summary>
        /// Gets URLs of the copied output files on external services.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public List<string> ResultUrls { get; internal set; }

        /// <summary>
        /// Gets the sharing info of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Sharing { get; internal set; }

        /// <summary>
        /// Gets the track type.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string TrackType { get; internal set; }

        /// <summary>
        /// Gets a value that indicates whether the file transfer was successful.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public bool TransferSuccess { get; internal set; }

        /// <summary>
        /// Gets the type of the service.
        /// </summary>
        [JsonIgnoreSerialization]
        [JsonProperty]
        public string Type { get; internal set; }

        /// <summary>
        /// Gets or sets the UUID of the service.
        /// </summary>
        [JsonProperty]
        public string Uuid { get; internal set; }
        #endregion

        #region Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingService"/> class.
        /// </summary>
        internal OutgoingService()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OutgoingService"/> class.
        /// </summary>
        /// <param name="uuid">The service UUID.</param>
        /// <exception cref="ArgumentException"><em>uuid</em> is empty or whitespace.</exception>
        /// <exception cref="ArgumentNullException"><em>uuid</em> is <strong>null</strong>.</exception>
        public OutgoingService(string uuid)
        {
            Precondition.IsNotNullOrWhiteSpace(uuid, nameof(uuid));

            Uuid = uuid;
        }
        #endregion

        #region Public Override Methods
        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        /// <returns>A string that represents the current object.</returns>
        public override string ToString()
        {
            return DisplayName;
        }
        #endregion
    }
}